# -*- coding: utf-8 -*-
"""Customer Coversion Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ds2vGwI1OsLTYmUYMBgY9nlkjT2wPktJ
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("/content/Customer Conversion Prediction - Customer Conversion Prediction.csv")
df.head()

df.shape

min(max(False,-3,-4), 2,7)

def flist(i, values = []):

                 values.append(i)

                 return values

flist(1)

flist(2)

val = flist(3)

print(val)

df.columns

df.info()

df.describe()

df.isnull().sum()

df.dtypes

sns.heatmap(df.corr(),annot =True)
plt.savefig('x.jpg')



df["job"].unique()

df['job'].value_counts()

sns.catplot(x="job", kind="count", palette="ch:.25", data=df)

df["marital"].unique()

df['marital'].value_counts()

sns.catplot(x="marital", kind="count", palette="ch:.25", data=df)

df["education_qual"].unique()

df['education_qual'].value_counts()

sns.catplot(x="education_qual", kind="count", palette="ch:.25", data=df)

df["call_type"].unique()

df['call_type'].value_counts()

sns.catplot(x="call_type", kind="count", palette="ch:.25", data=df)

df["mon"].unique()

df['mon'].value_counts()

sns.catplot(x="mon", kind="count", palette="ch:.25", data=df)

df["prev_outcome"].unique()

df['prev_outcome'].value_counts()

sns.catplot(x="prev_outcome", kind="count", palette="ch:.25", data=df)

df["y"].unique()

df['y'].value_counts()

sns.catplot(x="y", kind="count", palette="ch:.25", data=df)

sns.pairplot(df,hue = "marital")
plt.savefig("pairplot1.jpg")

df1 = df.loc[~((df['job'] == 'unknown') & (df['call_type'] == 'unknown') & (df['education_qual'] == 'unknown') &  (df['prev_outcome'] == 'unknown'))]
df1.shape

df2 = df1.loc[((df1['age'] <65))]
df2.shape

fig=plt.figure(figsize=(13,7),dpi=60)
sns.countplot(x='marital',data= df2,hue = 'y',palette = 'gray')
fig.savefig("marital_vs_y.png")
#sns.plt.show()

fig=plt.figure(figsize=(13,7),dpi=60)
sns.countplot(x='mon',data= df2,hue = 'y',palette = 'Blues')
fig.savefig("month.png")

fig=plt.figure(figsize=(13,7),dpi=60)
sns.countplot(x='education_qual',data= df2,hue = 'y',palette = 'gray')
fig.savefig("edu.png")

fig=plt.figure(figsize=(15,7),dpi=60)
sns.countplot(x='job',data= df2,hue ='y',palette = 'Blues')
fig.savefig("job.png")

fig=plt.figure(figsize=(13,7),dpi=60)
sns.countplot(x='call_type',data= df2,hue = 'y',palette = 'gray')
fig.savefig("call_type.png")

fig=plt.figure(figsize=(13,7),dpi=60)
sns.countplot(x='prev_outcome',data= df2,hue = 'y',palette = 'gray')
fig.savefig("prev_outcome.png")

sns.jointplot(x='age',y ="num_calls",data = df,kind = 'reg')
fig.savefig("output.png")
#sns.plt.show()

"""The age group targeted is between 20-90 years and the calls are mostly done to the age category of 25-60 years and as insurance is provided to people below 65 so we have decided to drom the reocrds who are aged below 65."""

sns.jointplot(x='age',y ="num_calls",data = df2,kind = 'reg')
fig.savefig("age_vs_numcalls.png")

sns.jointplot(x='day',y ="num_calls",data = df,kind = 'reg')
fig.savefig("num_calls_vs_age.png")

sns.jointplot(x='age',y ="dur",data = df,hue = "y")
fig.savefig("age_vs_dur.png")

"""From the plot we can guess that the people aged between 30-60 are interested in knowing about the insurance as they are more stable financially to make that decision. """

df_train = pd.read_csv('/content/Customer Conversion Prediction - Customer Conversion Prediction.csv')
df_train

target_count = df_train.y.value_counts()
print('Class 0:', target_count[0])
print('Class 1:', target_count[1])
print('Proportion of class 0 is ', round(target_count[0] * 100 / (target_count[1] + target_count[0]), 2),'%')

target_count.plot(kind='bar', title='Count (target)');

!pip install imblearn

import imblearn

from sklearn.datasets import make_classification #subpackage used for creating own classifcation dataset
import pandas as pd

df = pd.read_csv('/content/Customer Conversion Prediction - Customer Conversion Prediction.csv')
df['y'] = y
#df
df.y.value_counts().plot(kind='bar', title='Count (target)');

def plot_2d_space(X, y, label='Classes'):   
    colors = ['#1F77B4', '#FF7F0E']
    markers = ['o', 's']
    for l, c, m in zip(np.unique(y), colors, markers):
        plt.scatter(
            X[y==l, 0],
            X[y==l, 1],
            c=c, label=l, marker=m
        )
    plt.title(label)
    plt.legend(loc='upper right')
    plt.show()

import matplotlib.pyplot as plt
import numpy as np
plot_2d_space(X, y, 'Imbalanced dataset (2 Features)')

from imblearn.over_sampling import RandomOverSampler

ros = RandomOverSampler() #Initialis the model 
X_ros, y_ros = ros.fit_resample(X, y) #Fit the model

#print(X_ros.shape[0] - X.shape[0], 'new random picked points')

plot_2d_space(X_ros, y_ros, 'Random over-sampling')
plot_2d_space(X, y, 'Original')

df['y'].value_counts()

df2.shape

X, y = make_classification(n_samples=, n_features=2, n_redundant=0,
	n_clusters_per_class=1, weights=[0.99], flip_y=0, random_state=1





import numpy as np

a = np.array([1, 2, 3,4,5], ndmin = 2)

print(a)



